# Generated by Django 4.2.10 on 2024-04-21 16:52

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='APILog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logtime', models.DateTimeField(blank=True, null=True)),
                ('requeststr', models.TextField(blank=True, null=True)),
                ('ip', models.TextField(blank=True, null=True)),
                ('app', models.TextField(blank=True, null=True)),
                ('version', models.TextField(blank=True, null=True)),
                ('logtext', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bcode', models.CharField(max_length=200, unique=True)),
                ('enabled', models.BooleanField(default=True)),
                ('queueenabled', models.BooleanField(default=True, verbose_name='Enabled Queuing System')),
                ('subscribe', models.BooleanField(default=False)),
                ('substart', models.DateTimeField(default=datetime.datetime(2000, 1, 1, 0, 0))),
                ('subend', models.DateTimeField(default=datetime.datetime(2000, 1, 1, 0, 0))),
                ('name', models.TextField()),
                ('address', models.TextField(blank=True, null=True)),
                ('gps', models.TextField(blank=True, null=True)),
                ('timezone', models.CharField(default='Asia/Hong_Kong', max_length=32)),
                ('officehourstart', models.TimeField(default=datetime.time(9, 0))),
                ('officehourend', models.TimeField(default=datetime.time(18, 0))),
                ('queuepriority', models.CharField(choices=[('time', 'By Ticket time'), ('user', 'By User priority'), ('mask', 'By Mask priority')], default='time', max_length=32)),
                ('queuemask', models.CharField(default='A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,', max_length=200)),
                ('websoftkey_show_waitinglist', models.BooleanField(default=True)),
                ('tickettimestart', models.TimeField(default=datetime.time(8, 0))),
                ('tickettimeend', models.TimeField(default=datetime.time(17, 0))),
                ('ticketmax', models.IntegerField(default=999)),
                ('ticketnext', models.IntegerField(default=1)),
                ('ticketnoformat', models.TextField(default='000')),
                ('ticketrepeatnumber', models.BooleanField(default=True)),
                ('displayenabled', models.BooleanField(default=True)),
                ('displayflashtime', models.IntegerField(default=3)),
                ('flashlighttime', models.IntegerField(default=3)),
                ('voiceenabled', models.BooleanField(default=True)),
                ('language1', models.IntegerField(default=1, help_text='English')),
                ('O_Replace_Zero', models.BooleanField(default=True, help_text='Replace voice to [Oh] from [Zero]')),
                ('language2', models.IntegerField(default=0, help_text='Cantonese')),
                ('language3', models.IntegerField(default=0, help_text='Manadrin')),
                ('language4', models.IntegerField(default=0, help_text='Portuguese')),
                ('usersinglelogin', models.BooleanField(default=False)),
                ('webtvcsslink', models.TextField(default='styles/styletv.css')),
                ('webtvlogolink', models.TextField(default='images/logo_ts.png')),
                ('SMSenabled', models.BooleanField(default=False)),
                ('SMSmsg', models.TextField(blank=True, max_length=70, null=True)),
                ('SMSQuota', models.IntegerField(default=500, help_text='Total no. of SMS per month', verbose_name='SMS Quota')),
                ('SMSUsed', models.IntegerField(default=0, help_text='Total no. of SMS used', verbose_name='SMS used in month')),
                ('SMSResetDay', models.IntegerField(default=1, help_text='SMS reset day of the month (1-28)', verbose_name='SMS Reset day')),
                ('SMSResetLast', models.CharField(blank=True, help_text='Last reset date of SMS', max_length=200, null=True)),
                ('bookingenabled', models.BooleanField(default=True, verbose_name='Enabled Booking system')),
                ('bookingPage1Text', models.TextField(blank=True, default='多謝你預約我們的維修中心\n請帶發票在預約時間到維修中心\n地址: [[ADDR]]', help_text='Booking HTML page 1 text, [[ADDR]] is branch.address.', null=True)),
                ('bookingPage1ScrollingText', models.TextField(blank=True, default='Scrolling text 1', help_text='Booking HTML page 1 Scrolling text, [[ADDR]] is branch address.', null=True)),
                ('bookingPage2Text', models.TextField(blank=True, default='請輸入 電郵 或 手機號碼(香港)\n我們發送確認信給你', help_text='Booking HTML page 2 text, [[ADDR]] is branch.address.', null=True)),
                ('bookingPage2ScrollingText', models.TextField(blank=True, default='Scrolling text 2', help_text='Booking HTML page 2 Scrolling text, [[ADDR]] is branch.address.', null=True)),
                ('bookingPage3Text', models.TextField(blank=True, default='你好 [[NAME]] :\n\n你的預約時間：\n[[DATE]] [[WEEK]]\n[[TIME]]\n請帶發票在預約時間到維修中心\n地址: [[ADDR]]\n如需要更改時間/取消預約請盡早打電話給我們 12345678\n\n這個訊息會發送去你的電郵或者手機短訊。\n\nTSVD', help_text='Booking success text, [[ADDR]] is branch address, [[NAME]] is customer name, [[DATE]] is booking start date, [[TIME]] is booking start time. [[WEEK]] is week.', null=True)),
                ('bookingSuccessEmailEnabled', models.BooleanField(default=True, verbose_name='Booking success email enabled')),
                ('bookingSuccessEmailSubject', models.TextField(blank=True, default='你的預約已經確認 - TSVD', help_text='Booking success email subject, [[ADDR]] is branch address, [[NAME]] is customer name, [[DATE]] is booking start date, [[TIME]] is booking start time. [[WEEK]] is week.', null=True)),
                ('bookingSuccessEmailBody', models.TextField(blank=True, default='你好 [[NAME]] :\n\n你的預約時間：\n[[DATE]] [[WEEK]]\n[[TIME]]\n請帶發票在預約時間到維修中心\n地址: [[ADDR]]\n如需要更改時間/取消預約請盡早打電話給我們 12345678\n\nTSVD', help_text='Booking success email text, [[ADDR]] is branch address, [[NAME]] is customer name, [[DATE]] is booking start date, [[TIME]] is booking start time. [[WEEK]] is week.', null=True)),
                ('bookingSMSSuccessEnabled', models.BooleanField(default=True)),
                ('bookingSMSSuccess', models.TextField(blank=True, default='你的預約已經確認 - TSVD\n預約時間：\n[[DATE]]\n[[TIME]]\n如需要更改/取消預約請盡早致電 12345678', help_text='SMS text body for booking success, [[DATE]] is booking start date, [[TIME]] is booking start time. 160 characters / 70 characters (Unicode) per one SMS', null=True, verbose_name='Booking success SMS')),
                ('bookingNewEmailEnabled', models.BooleanField(default=True, verbose_name='Enabled New Booking email notification')),
                ('bookingNewEmailSubject', models.TextField(blank=True, default='你有新預約 - TSVD', help_text='[[ADDR]] is branch address, [[NAME]] is customer name, [[DATE]] is booking start date, [[TIME]] is booking start time, [[WEEK]] is week, [[PHONE]] is customer phone, [[EMAIL]] is customer email, [[BNAME]] is branch name, [[BCODE]] is branch code, [[USER]] is user first name.', null=True, verbose_name='Email subject for New Booking')),
                ('bookingNewEmailBody', models.TextField(blank=True, default='恭喜，你有新預約\n\n客人名稱：[[NAME]]\n預約時間：\n[[DATE]] [[WEEK]]\n[[TIME]]\n地址: [[ADDR]]\n客人電話：[[PHONE]]\n客人電郵：[[EMAIL]]\n\nTSVD', help_text='[[ADDR]] is branch address, [[NAME]] is customer name, [[DATE]] is booking start date, [[TIME]] is booking start time, [[WEEK]] is week, [[PHONE]] is customer phone, [[EMAIL]] is customer email, [[BNAME]] is branch name, [[BCODE]] is branch code, [[USER]] is user first name.', null=True, verbose_name='Email body for New Booking')),
                ('bookingToQueueEnabled', models.BooleanField(default=True, verbose_name='Booking to Queue enabled')),
                ('bookingToQueueOnTimeRangeLate', models.IntegerField(default=10, verbose_name='Booking to Queue on time range late (1 to 15 minutes)')),
                ('bookingToQueueOnTimeRangeEarly', models.IntegerField(default=-15, verbose_name='Booking to Queue on time range early (-1 to -30 minutes)')),
                ('bookingToQueueLateUnit', models.IntegerField(default=5, verbose_name='Booking to Queue late unit (1 to 15 minutes)')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('bookingNewEmailUser', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='New Booking email list')),
            ],
        ),
        migrations.CreateModel(
            name='CounterType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=200)),
                ('lang1', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('lang2', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('lang3', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('lang4', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('displayscrollingtext', models.TextField(blank=True, default='Testing 123...', null=True)),
                ('vert_showcounter', models.BooleanField(default=True)),
                ('vert_showlatest', models.BooleanField(default=True)),
                ('vert_latestpagehold', models.IntegerField(default=10)),
                ('showcounter', models.BooleanField(default=True)),
                ('showlatest', models.BooleanField(default=True)),
                ('latestpagehold', models.IntegerField(default=6)),
                ('countermode', models.CharField(default='normal', help_text='Normal mode=normal, Call Centre mode=cc, Restaurant mode=res', max_length=200, verbose_name='Counter Mode')),
                ('nextcounter', models.IntegerField(default=0)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.branch')),
            ],
            options={
                'ordering': ['branch'],
                'unique_together': {('branch', 'name')},
            },
        ),
        migrations.CreateModel(
            name='SystemLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logtime', models.DateTimeField(blank=True, null=True)),
                ('logtext', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='testingModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('des', models.TextField(blank=True, null=True)),
                ('price', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='testingModel2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tickettype', models.CharField(max_length=200)),
                ('ticketnumber', models.CharField(max_length=200)),
                ('step', models.IntegerField(default=1)),
                ('status', models.TextField(default='waiting')),
                ('locked', models.BooleanField(default=False)),
                ('tickettime', models.DateTimeField()),
                ('tickettext', models.TextField(blank=True, default='', null=True)),
                ('printernumber', models.TextField(blank=True, default='', null=True)),
                ('printedtimes', models.IntegerField(default=0)),
                ('remark', models.TextField(blank=True, default='', null=True)),
                ('booking_tickettype', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('booking_ticketnumber', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('booking_time', models.DateTimeField(blank=True, default=django.db.models.deletion.SET_NULL, null=True)),
                ('booking_name', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('booking_score', models.IntegerField(default=0)),
                ('booking_id', models.IntegerField(blank=True, default=django.db.models.deletion.SET_NULL, null=True)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.branch')),
                ('countertype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.countertype')),
                ('createdby', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdby', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TicketFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True)),
                ('ttype', models.CharField(max_length=10)),
                ('from_booking', models.BooleanField(default=False)),
                ('tformat', models.TextField(default='<CEN>\n<LOGO>1\n<TEXT>歡迎光臨，請稍候<LINE>\n<TEXT>Welcome, please wait to be served<LINE>\n<LINE>\n<B_FONT>\n<TEXT>票 號<LINE>\n<TEXT>Ticket number<LINE>\n<D_FONT><TICKET><LINE>\n<N_FONT>\n<DATETIME><LINE>\n<QR>http://192.168.1.22:8000<MYTICKET><LINE>\n<TEXT>掃描QR查看您的網上飛仔<LINE>\n<TEXT>Scan QR code for your e-ticket<LINE>\n<CUT>')),
                ('ticketnext', models.IntegerField(default=1)),
                ('touchkey_lang1', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('touchkey_lang2', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('touchkey_lang3', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('touchkey_lang4', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.branch')),
            ],
            options={
                'unique_together': {('ttype', 'branch')},
            },
        ),
        migrations.CreateModel(
            name='TicketRoute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True)),
                ('tickettype', models.CharField(max_length=200)),
                ('step', models.IntegerField(default=1)),
                ('displasttickettype', models.CharField(default='-', max_length=200)),
                ('displastticketnumber', models.CharField(default='-', max_length=200)),
                ('displastcounter', models.CharField(default='-', max_length=200)),
                ('waiting', models.IntegerField(default=0)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.branch')),
                ('countertype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.countertype')),
            ],
            options={
                'ordering': ['branch', 'tickettype', 'step'],
                'unique_together': {('branch', 'tickettype', 'step')},
            },
        ),
        migrations.CreateModel(
            name='UserStatusLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.TextField(default='waiting')),
                ('starttime', models.DateTimeField(blank=True, null=True)),
                ('endtime', models.DateTimeField(blank=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.ticket')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tickettype', models.CharField(blank=True, default='', help_text='Ticket type', max_length=200, null=True)),
                ('queuepriority', models.CharField(choices=[('branch', 'By Branch'), ('time', 'By Ticket time'), ('user', 'By User priority'), ('mask', 'By Branch mask priority')], default='branch', help_text='Queue Priority', max_length=32)),
                ('staffnumber', models.CharField(blank=True, default='', help_text='Staff number', max_length=200, null=True)),
                ('mobilephone', models.CharField(blank=True, help_text='Mobile phone', max_length=20, null=True)),
                ('enabled_queue', models.BooleanField(default=False, verbose_name='Queue enabled')),
                ('enabled_crm', models.BooleanField(default=False, verbose_name='CRM enabled')),
                ('enabled_booking', models.BooleanField(default=False, verbose_name='Booking enabled')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('branchs', models.ManyToManyField(blank=True, help_text='Branch access rights', related_name='branchs_u', to='base.branch')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated', '-created'],
            },
        ),
        migrations.CreateModel(
            name='TicketTemp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tickettype', models.CharField(max_length=200)),
                ('ticketnumber', models.CharField(max_length=200)),
                ('step', models.IntegerField(default=1)),
                ('status', models.TextField(default='waiting')),
                ('locked', models.BooleanField(default=False)),
                ('tickettime', models.DateTimeField()),
                ('tickettext', models.TextField(blank=True, default='', null=True)),
                ('printernumber', models.TextField(blank=True, default='', null=True)),
                ('printedtimes', models.IntegerField(default=0)),
                ('remark', models.TextField(blank=True, default='', null=True)),
                ('securitycode', models.CharField(blank=True, default='', max_length=10, null=True)),
                ('myticketlink', models.CharField(blank=True, default='', max_length=1000, null=True)),
                ('booking_tickettype', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('booking_ticketnumber', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('booking_time', models.DateTimeField(blank=True, null=True)),
                ('booking_name', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('booking_score', models.IntegerField(default=0)),
                ('booking_id', models.IntegerField(blank=True, default=django.db.models.deletion.SET_NULL, null=True)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.branch')),
                ('countertype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.countertype')),
                ('createdby', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='createdbytemp', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.ticket')),
                ('ticketformat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.ticketformat')),
                ('ticketroute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.ticketroute')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TicketLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.TextField(blank=True, null=True)),
                ('version', models.TextField(blank=True, null=True)),
                ('logtime', models.DateTimeField()),
                ('logtext', models.TextField(blank=True, null=True)),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.ticket')),
                ('tickettemp', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.tickettemp')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TicketData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step', models.IntegerField(default=1)),
                ('starttime', models.DateTimeField(blank=True, null=True)),
                ('calltime', models.DateTimeField(blank=True, null=True)),
                ('processtime', models.DateTimeField(blank=True, null=True)),
                ('donetime', models.DateTimeField(blank=True, null=True)),
                ('misstime', models.DateTimeField(blank=True, null=True)),
                ('voidtime', models.DateTimeField(blank=True, null=True)),
                ('waitingperiod', models.IntegerField(blank=True, null=True)),
                ('walkingperiod', models.IntegerField(blank=True, null=True)),
                ('processingperiod', models.IntegerField(blank=True, null=True)),
                ('totalperiod', models.IntegerField(blank=True, null=True)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.branch')),
                ('calluser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='calluser', to=settings.AUTH_USER_MODEL)),
                ('countertype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.countertype')),
                ('doneuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='doneuser', to=settings.AUTH_USER_MODEL)),
                ('missuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='missuser', to=settings.AUTH_USER_MODEL)),
                ('processuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processuser', to=settings.AUTH_USER_MODEL)),
                ('startuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='startuser', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.ticket')),
                ('tickettemp', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.tickettemp')),
                ('voiduser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='voiduser', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='ticket',
            name='ticketformat',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.ticketformat'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='ticketroute',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.ticketroute'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='SubscribeOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.IntegerField()),
                ('startdate', models.DateTimeField()),
                ('enddate', models.DateTimeField()),
                ('amount', models.FloatField()),
                ('invoice', models.CharField(max_length=200, null=True)),
                ('remark', models.CharField(max_length=1000, null=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.branch')),
                ('createdby', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('API_Log_Enabled', models.BooleanField(default=True)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.branch')),
            ],
        ),
        migrations.CreateModel(
            name='DisplayAndVoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('counternumber', models.CharField(max_length=200, null=True)),
                ('flashtime', models.IntegerField(blank=True, default=3, null=True)),
                ('displaytime', models.DateTimeField(blank=True, null=True)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.branch')),
                ('countertype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.countertype')),
                ('tickettemp', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.tickettemp')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['displaytime'],
            },
        ),
        migrations.CreateModel(
            name='CounterStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('counternumber', models.CharField(max_length=200, null=True)),
                ('enabled', models.BooleanField(default=True)),
                ('status', models.TextField(default='waiting')),
                ('loged', models.BooleanField(default=False)),
                ('logintime', models.DateTimeField(blank=True, null=True)),
                ('lastactive', models.DateTimeField(blank=True, null=True)),
                ('flashid', models.IntegerField(blank=True, default=1, null=True)),
                ('countertype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.countertype')),
                ('tickettemp', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.tickettemp')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CounterLoginLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('counternumber', models.CharField(max_length=200, null=True)),
                ('logintime', models.DateTimeField(blank=True, null=True)),
                ('logouttime', models.DateTimeField(blank=True, null=True)),
                ('countertype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.countertype')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BookingTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_tickettype', models.CharField(max_length=200)),
                ('next_ticketnumber', models.IntegerField(default=1)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.branch')),
            ],
        ),
        migrations.CreateModel(
            name='WebTouch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, null=True)),
                ('enabled', models.BooleanField(default=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.branch')),
                ('touchkey', models.ManyToManyField(to='base.ticketformat')),
            ],
            options={
                'unique_together': {('name', 'branch')},
            },
        ),
        migrations.CreateModel(
            name='PrinterStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('printernumber', models.TextField(blank=True, null=True)),
                ('status', models.TextField(blank=True, null=True)),
                ('statustext', models.TextField(blank=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.branch')),
            ],
            options={
                'ordering': ['-updated', '-created'],
                'unique_together': {('branch', 'printernumber')},
            },
        ),
    ]
